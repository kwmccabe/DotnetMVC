// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webapp.Data;

namespace webapp.Data.Migrations
{
    [DbContext(typeof(MvcDbContext))]
    partial class MvcDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("webapp.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("RoleNotes");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("webapp.Models.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("webapp.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserNotes");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("webapp.Models.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("webapp.Models.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("webapp.Models.AppUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("webapp.Models.AppUserToken", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("webapp.Models.Content", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("ContentStatus")
                        .IsRequired();

                    b.Property<string>("Keyname")
                        .IsRequired()
                        .HasColumnType("varchar(63)")
                        .HasMaxLength(63);

                    b.Property<int>("TemplateId");

                    b.Property<string>("Text");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("Title")
                        .HasName("Content_Title");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("webapp.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ItemType")
                        .IsRequired();

                    b.Property<string>("Keyname")
                        .IsRequired()
                        .HasColumnType("varchar(63)")
                        .HasMaxLength(63);

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("ItemType")
                        .HasName("Index_ItemType");

                    b.HasIndex("Keyname")
                        .IsUnique()
                        .HasName("Index_Keyname")
                        .HasFilter("[Keyname] IS NOT NULL");

                    b.HasIndex("OwnerId");

                    b.ToTable("Item");

                    b.HasDiscriminator<string>("ItemType").HasValue("Item");
                });

            modelBuilder.Entity("webapp.Models.ItemUser", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ItemId");

                    b.Property<int>("Role");

                    b.HasKey("UserId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemUser");
                });

            modelBuilder.Entity("webapp.Models.Template", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Keyname")
                        .IsRequired()
                        .HasColumnType("varchar(63)")
                        .HasMaxLength(63);

                    b.Property<string>("TemplateStatus")
                        .IsRequired();

                    b.Property<string>("Text");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .HasName("Template_Title");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("webapp.Models.ContentItem", b =>
                {
                    b.HasBaseType("webapp.Models.Item");

                    b.HasDiscriminator().HasValue("Content");
                });

            modelBuilder.Entity("webapp.Models.TemplateItem", b =>
                {
                    b.HasBaseType("webapp.Models.Item");

                    b.HasDiscriminator().HasValue("Template");
                });

            modelBuilder.Entity("webapp.Models.AppRoleClaim", b =>
                {
                    b.HasOne("webapp.Models.AppRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.AppUserClaim", b =>
                {
                    b.HasOne("webapp.Models.AppUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.AppUserLogin", b =>
                {
                    b.HasOne("webapp.Models.AppUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.AppUserRole", b =>
                {
                    b.HasOne("webapp.Models.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.AppUserToken", b =>
                {
                    b.HasOne("webapp.Models.AppUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.Content", b =>
                {
                    b.HasOne("webapp.Models.ContentItem", "Item")
                        .WithOne("Content")
                        .HasForeignKey("webapp.Models.Content", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.Template", "Template")
                        .WithMany("Content")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.Item", b =>
                {
                    b.HasOne("webapp.Models.AppUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("webapp.Models.ItemUser", b =>
                {
                    b.HasOne("webapp.Models.Item", "Item")
                        .WithMany("ItemUsers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("webapp.Models.AppUser", "User")
                        .WithMany("ItemUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("webapp.Models.Template", b =>
                {
                    b.HasOne("webapp.Models.TemplateItem", "Item")
                        .WithOne("Template")
                        .HasForeignKey("webapp.Models.Template", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
